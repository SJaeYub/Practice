import java.util.*;

public class Main {
	
	static int n;
	static int[][] apart_map;
	static boolean[][] visited;
    private static int dx[] = {0,0,1,-1};
    private static int dy[] = {1,-1,0,0};
	static int cnt = 0;
	static ArrayList<Integer> result;
	
	public static void main(String[] args) {
		n = 0;
		int apart_cnt = 0;
		Scanner sc = new Scanner(System.in);
		
		n = sc.nextInt();
		apart_map = new int[n][n];		
		visited = new boolean[n][n];
		String[] temp_apart = new String[n];
		
		for(int i = 0; i < n; i++) {
			temp_apart[i] = sc.next();
			for(int j = 0; j < n; j++) {
				apart_map[i][j] = temp_apart[i].charAt(j)-'0';
				visited[i][j] = false;
			}
		}		
		
		result = new ArrayList<>();
///////////////////////데이터 입력 성공
		
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < n; j++) {
				if(apart_map[i][j] == 1 && !visited[i][j]) {
					cnt = 1;					//중복을 피하기 위한 일종의 초기화
					dfs(i,j);
					result.add(cnt);
				}
			}
		}

		Collections.sort(result);
		System.out.println(result.size());
		for(int i : result) {
			System.out.println(i);
		}
		
	}
	
	public static int dfs(int a, int b) {
		visited[a][b] = true;
		
		for(int i = 0; i < 4; i++) {
            int nx = a + dx[i];
            int ny = b + dy[i];
			
			if(nx >= 0 && ny >= 0 && nx < n && ny < n) {
				if(apart_map[nx][ny] == 1 && !visited[nx][ny]) {
					dfs(nx, ny);
					cnt++;
				}
			}
		}
		return cnt;
		
	}

}
