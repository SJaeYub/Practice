import java.util.*;

public class Main {

	static class Position {
		int y, x;

		Position(int a, int b) {
			this.y = a;
			this.x = b;
		}
	}

	static int n, cnt, dir_cnt;
	static int[][] map;
	static int start_x = n / 2;
	static int start_y = n / 2;
	static int start_index = 1;
	static Queue<Position> q;
	static int[] x = { -1, 0, 1, 0 };
	static int[] y = { 0, 1, 0, -1 };
	static boolean[][] visited;
	static int[][] spread_x = { { -2, -1, 0, 0, 1, -1, 0, 0, 1, -1 }, { 0, -1, -1, -2, -1, 1, 1, 2, 1, 0 },
			{ 2, 1, 0, 0, -1, 1, 0, 0, -1, 1 }, {0, 1, 1, 2, 1, -1, -1, -2, -1, 0 } };
	static int[][] spread_y = { { 0, -1, -1, -2, -1, 1, 1, 2, 1, 0 }, { 2, 1, 0, 0, -1, 1, 0, 0, -1, 1 },
			{ 0, 1, 1, 2, 1, -1, -1, -2, -1, 0 }, { -2, -1, 0, 0, 1, -1, 0, 0, 1, -1} };
	static int[] spread_ratio = { 5, 10, 7, 2, 1, 10, 7, 2, 1, 0 };
	static int ans = 0;

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		n = sc.nextInt();
		map = new int[n][n];

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				map[i][j] = sc.nextInt();
			}
		}

		start_x = n / 2;
		start_y = n / 2;
		visited = new boolean[n][n];

		dfs(start_y, start_x, -1);
		System.out.println(ans);
	}

	private static void dfs(int ty, int tx, int cnt_index) {
		if (tx == 0 && ty == 0) {
			move_sand(ty, tx, cnt_index);
			return;
		}

		visited[ty][tx] = true;

		int mx, my;
		if (cnt_index != -1) {
			mx = tx + x[cnt_index];
			my = ty + y[cnt_index];
			move_sand(ty, tx, cnt_index);
		} else {
			mx = tx + x[0];
			my = ty + y[0];
		}

		int check_x;
		int check_y;

		if (cnt_index == 3) {
			check_x = tx + x[0];
			check_y = ty + y[0];
		} else {
			check_x = tx + x[cnt_index + 1]; // 왼쪽방향 0 아래쪽방향
			check_y = ty + y[cnt_index + 1]; // 왼쪽방향 아래쪽방향
		}

		if (!visited[check_y][check_x]) { // 방문안했음
			if (cnt_index == 3) {
				dfs(check_y, check_x, 0);
			} else {
				dfs(check_y, check_x, cnt_index + 1); // 2번으로 들어감 아래쪽방향
			}

		} else if (visited[check_y][check_x]) {
			dfs(my, mx, cnt_index);
		}
	}

	private static void move_sand(int ty, int tx, int cnt_index) { // 태풍의 현재 위치와 진행방향
		int temp_sand = 0;
		for (int i = 0; i < 10; i++) {
			int boundary_x = tx + spread_x[cnt_index][i];
			int boundary_y = ty + spread_y[cnt_index][i];
			if (i < 9) {
				if (boundary_y < 0 || boundary_y >= n || boundary_x < 0 || boundary_x >= n) {
					ans += ((map[ty][tx] * spread_ratio[i]) / 100);
					temp_sand += ((map[ty][tx] * spread_ratio[i]) / 100);
				} else {
					map[boundary_y][boundary_x] += (map[ty][tx] * spread_ratio[i]) / 100;
					temp_sand += (map[ty][tx] * spread_ratio[i]) / 100;
				}
			} else {
				if (boundary_y < 0 || boundary_y >= n || boundary_x < 0 || boundary_x >= n) {
					ans += (map[ty][tx] - temp_sand);
					temp_sand += (map[ty][tx] - temp_sand);
				} else {
					map[boundary_y][boundary_x] += (map[ty][tx] - temp_sand);
				}
			}
		}
		map[ty][tx] = 0;

	}
}
